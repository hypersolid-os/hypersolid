#!/usr/bin/env bash

VERSION="1.0.0"

show_usage(){
    cat << EOF
Usage: pstorage <command> [args...]
  Commands:
    view|ls|inspect             Show all files within the persistent storage mount
    rw                          Remount the persistent storage parition as writeable
    ro                          Remount the persistent storage parition as readonly
    reload                      Clear filesystem cache to apply changes made in lowerdir
    persist                     Make config set persistent
        > services              Systemd config /etc/systemd/system/{*target.wants}
        > users                 users/groups
    --help                      Displays this help
    --version                   Displays version
EOF
    exit 0
}

show_version(){
    cat << EOF
pstorage
 - Version: ${VERSION}
 - License: GPL-2.0 https://www.gnu.org/licenses/old-licenses/gpl-2.0.txt
EOF
    exit 0
}

# simple processing
[ "$1" = "--help" ] && show_usage
[ "$1" = "--version" ] && show_version

# current working dir
WORKING_DIR="$(pwd)"

# basedir
BASEDIR="$( cd "$( dirname "$(realpath ${BASH_SOURCE[0]})" )" && pwd )"

# locations
PSTORAGE_MOUNT=/mnt/storage
MNT_TMPFS=/mnt/tmpfs
OVERLAY_UPPER=$MNT_TMPFS/.upper

# command provided ?
if [ -z "$1" ]; then
    show_usage
fi

# clear filecaches/apply overlayfs changes
# ----------------------------------------------
function clearFSCache(){
    echo 3 > /proc/sys/vm/drop_caches && {
        echo "cached dropped"
    }
}

# pstorage mounted ?
# ----------------------------------------------
function isStorageMounted(){
    # mountpoint exists ?
    mountpoint -q $PSTORAGE_MOUNT || {
        echo "ERROR: persistent storage not mounted"
        exit 1
    }
}

# view persistent files
# ----------------------------------------------
function viewFiles(){
    # ensure storage is mounted
    isStorageMounted

    # display files
    tree $PSTORAGE_MOUNT --charset unicode
}

# remount read/write
# ----------------------------------------------
function remountRW(){
    # ensure storage is mounted
    isStorageMounted

    # remount
    mount -o remount,rw $PSTORAGE_MOUNT && {
        echo "persistent storage $PSTORAGE_MOUNT is WRITEABLE"
    } || {
        echo "ERROR: persistent storage $PSTORAGE_MOUNT is NOT WRITEABLE"
        exit 1
    }
}

# remount readonly
# ----------------------------------------------
function remountRO(){
    # ensure storage is mounted
    isStorageMounted

    # remount
    mount -o remount,ro $PSTORAGE_MOUNT && {
        echo "persistent storage $PSTORAGE_MOUNT is now READONLY"
    } || {
        echo "ERROR: cannot set persistent storage $PSTORAGE_MOUNT to READONLY"
        exit 1
    }
}

# persist systemd
# ----------------------------------------------
function persistSystemdConfig(){
    # ensure storage is mounted
    remountRW

     # log
    echo "copying systemd slices.."

    # copy files
    mkdir -p "${PSTORAGE_MOUNT}/etc/systemd/system"
    cp -R $OVERLAY_UPPER/etc/systemd/system/{multi-user.target.wants,network-online.target.wants,timers.target.wants} "${PSTORAGE_MOUNT}/etc/systemd/system"

    # readonly
    remountRO
}

# persist users
# ----------------------------------------------
function persistUsers(){
    # ensure storage is mounted
    remountRW

    # log
    echo "copying user/group files.."

    # copy files
    mkdir -p "${PSTORAGE_MOUNT}/etc/ssh/authorized_keys"

    # copy user/group definitions
    cp /etc/{passwd,group,shadow,gshadow} "${PSTORAGE_MOUNT}/etc/"

    # copy ssh keys
    if [ -d "/etc/ssh/authorized_keys" ]; then
        echo "copying user ssh keys.."
        cp /etc/ssh/authorized_keys/* "${PSTORAGE_MOUNT}/etc/ssh/authorized_keys"

        # drop root keys if set
        if [ -f "${PSTORAGE_MOUNT}/etc/ssh/authorized_keys/root" ]; then
            rm ${PSTORAGE_MOUNT}/etc/ssh/authorized_keys/root
        fi
    fi

    # readonly
    remountRO
}


# Command Dispatching
# ---------------------------------------
case "$1:$2" in
    view:*|ls:*|inspect:*)
        viewFiles
        exit 0
    ;;
    
    rw:*)
        remountRW
        exit 0
    ;;
    
    ro:*)
        remountRO
        exit 0
    ;;

    reload:*)
        clearFSCache
        exit 0
    ;;

    persist:services)
        persistSystemdConfig
        exit 0
    ;;

    persist:users)
        persistUsers
        exit 0
    ;;

    *)
        show_usage
        exit 1
    ;;
esac