#!/bin/sh

#####################################################################################
#                                                                                   #
#                         SQUASHFS ROOT with tmpfs overlay                          #
#                          and optional persistent storage                          #
#                                                                                   #
#        Copyright (C) 2018-2022 Andi Dittrich <https://andidittrich.com>           #
#                                                                                   #
# ISSUES: https://github.com/hypersolid-os/hypersolid                               #
# LICENSE: GNU General Public License 2                                             #
#                                                                                   #
# hypersolid comes with ABSOLUTELY NO WARRANTY.                                     #
# This is free software, and you may copy, distribute and/or modify it under the    #
# terms of the GNU GPL Version 2.                                                   #
# See the GNU General Public License 2 for details.                                 #
#####################################################################################

PREREQ=""
prereqs()
{
    echo "$PREREQ"
}

case $1 in
prereqs)
    prereqs
    exit 0
    ;;
esac

. /scripts/functions
# Begin real processing below this line

# breakpoint
maybe_break hypersolid_fs_top

log_begin_msg "[hypersolid] initializing merged root-file-system with tmpfs overlay"

# ############################################################################
# CONFIG
# ############################################################################

# filename of the squashfs image file on root partition
SQUAHSFS_IMG_FILE=system.img

# mount points
MNT_SYSTEM=/mnt/system
MNT_SQUASHFS=/mnt/rootfs
MNT_TMPFS=/mnt/tmpfs
MNT_STORAGE=/mnt/storage

# overlayfs directories
OVERLAY_WORK=$MNT_TMPFS/.work
OVERLAY_UPPER=$MNT_TMPFS/.upper

# ############################################################################
# UTILITY
# ############################################################################

# check exit code - throw failure message in case of error
secure_mkdir(){
    # create directory tree
    mkdir -p $1 || {
        panic "[hypersolid] failed to create directory $1"
    }
}

# move mount - throw failure message in case of error
# $1: source
# $2: destination
secure_mv_mount(){
    # move $1 to $2
    mount -o move $1 $2 || {
        panic "[hypersolid] failed to move mount ${1} to ${2}"
    }
}

# mount filesystem - throw failure message in case of error
# $1: type
# $2: source
# $3: directory
# $4: options
secure_mount(){
    # options provided ?
    if [ -z "$4" ]; then 
        # no options provided
        mount -t $1 $2 $3
    else
        # options provieded via $4
        mount -t $1 -o $4 $2 $3
    fi

    # error ?
    if [ $? -ne 0 ]; then
        panic "[hypersolid] failed to mount $2:$1 on $3 - ($4)"
    fi
}

# ############################################################################
# Stage 1 - create temporary mount points for tmpfs and overlayfs
# ############################################################################

# create MNT_SQUASHFS mount within init rootfs
secure_mkdir ${MNT_SQUASHFS}

# create MNT_TMPFS mount within init rootfs
secure_mkdir ${MNT_TMPFS}

# create MNT_SYSTEM mount within init rootfs
secure_mkdir ${MNT_SYSTEM}

# ############################################################################
# Stage 2 - Create TMPFS
# ############################################################################

# create tmpfs (used as rw overlay)
secure_mount "tmpfs" tmpfs-live ${MNT_TMPFS} "rw,relatime,size=75%"

# create OVERLAY_WORK mount within tmpfs
secure_mkdir ${OVERLAY_WORK}

# create OVERLAY_UPPER mount within tmpfs
secure_mkdir ${OVERLAY_UPPER}

# ############################################################################
# Stage 3 - create mount points within final tmpfs
# ############################################################################

# create MNT_SYSTEM mount
secure_mkdir ${OVERLAY_UPPER}${MNT_SYSTEM}

# create MNT_SQUASHFS mount
secure_mkdir ${OVERLAY_UPPER}${MNT_SQUASHFS}

# create MNT_TMPFS mount
secure_mkdir ${OVERLAY_UPPER}${MNT_TMPFS}

# create MNT_STORAGE mount
secure_mkdir ${OVERLAY_UPPER}${MNT_STORAGE}

# create /boot mount
secure_mkdir ${OVERLAY_UPPER}/boot

# ############################################################################
# Stage 4 - initialize squashfs
# ############################################################################

# system image mounted into initramfs ?
if [ -f /${SQUAHSFS_IMG_FILE} ]; then
    mv /${SQUAHSFS_IMG_FILE} ${MNT_TMPFS}/${SQUAHSFS_IMG_FILE}

    # enforce file permissions
    chmod 0440 ${MNT_TMPFS}/${SQUAHSFS_IMG_FILE}

    # initialize loopback
    losetup /dev/loop0 ${MNT_TMPFS}/${SQUAHSFS_IMG_FILE} || {
        panic "[hypersolid] cannot initialize loopback device of ${MNT_TMPFS}/${SQUAHSFS_IMG_FILE}"
    }

# system image on dedicated rootmnt parition ?
else
    # system partition mounted ?
    mountpoint -q ${rootmnt} || {
        panic "[hypersolid] system partition ${rootmnt} not mounted"
    }

    # move system partition
    secure_mv_mount ${rootmnt} ${MNT_SYSTEM}

    # image file provided via system partition ?
    [ -f ${MNT_SYSTEM}/${SQUAHSFS_IMG_FILE} ] || {
        panic "[hypersolid] system image not found in ${MNT_SYSTEM}/${SQUAHSFS_IMG_FILE}"
    }

    # initialize loopback
    losetup /dev/loop0 ${MNT_SYSTEM}/${SQUAHSFS_IMG_FILE} || {
        panic "[hypersolid] cannot initialize loopback device of ${MNT_SYSTEM}/${SQUAHSFS_IMG_FILE}"
    }
fi

# mount squashfs rootfs
secure_mount "squashfs" /dev/loop0 ${MNT_SQUASHFS}

# ############################################################################
# Stage 5 - initialize overlayfs mount + persistent storage mount
# ############################################################################

# persistent storage set ?
mountpoint -q ${MNT_STORAGE} && {
    # create overlay mount with persistent storage
    secure_mount "overlay" overlay ${rootmnt} "lowerdir=${MNT_STORAGE}:${MNT_SQUASHFS},upperdir=${OVERLAY_UPPER},workdir=${OVERLAY_WORK}" 

} || {
    # create overlay mount without second storage layer
    secure_mount "overlay" overlay ${rootmnt} "lowerdir=${MNT_SQUASHFS},upperdir=${OVERLAY_UPPER},workdir=${OVERLAY_WORK}"
}

# ############################################################################
# Stage 6 - move mount points into final root fs
# ############################################################################

# move tmpfs mount into final rootfs
secure_mv_mount ${MNT_TMPFS} ${rootmnt}${MNT_TMPFS}

# move system mount into final rootfs
mountpoint -q ${MNT_SYSTEM} && secure_mv_mount ${MNT_SYSTEM} ${rootmnt}${MNT_SYSTEM}

# move persistent storage mount into final rootfs
mountpoint -q ${MNT_STORAGE} && secure_mv_mount ${MNT_STORAGE} ${rootmnt}${MNT_STORAGE}

# move squashfs mount into final rootfs
secure_mv_mount ${MNT_SQUASHFS} ${rootmnt}${MNT_SQUASHFS}

# ############################################################################

log_end_msg

# breakpoint
maybe_break hypersolid_fs_bottom

exit 0