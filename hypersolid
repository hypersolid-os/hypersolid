#!/usr/bin/env bash
# SPDX-License-Identifier: GPL-2.0

# _______________________________________________________________
#
# ____    _                                     _ _     _ 
# \ \ \  | |__  _   _ _ __   ___ _ __ ___  ___ | (_) __| |
#  \ \ \ | '_ \| | | | '_ \ / _ \ '__/ __|/ _ \| | |/ _` |
#  / / / | | | | |_| | |_) |  __/ |  \__ \ (_) | | | (_| |
# /_/_/  |_| |_|\__, | .__/ \___|_|  |___/\___/|_|_|\__,_|
#               |___/|_|                                  
#
#_______________________________________________________________

# https://github.com/hypersolid-os/hypersolid
VERSION="2.2.0"

show_usage(){
    cat << EOF
Usage: hypersolid <command> [args...]
build a custom debian image with mmdebstrap into a single squasfs-file with tmpfs overlay

Options:
    -h,--help                         Displays this help
    -v,--version                      Displays version

Commands:
    build <target-directory>          Build to target within the directory
    deploy <target-directory>         Deploy a already build target using custom deploy script within working dir
    sign <target-directory>           Run codesigning hook
    build-deploy <target-directory>   Build+deploy target
    update <target-directory>         Build+codesign+deploy target
    attach                            Attach the console to the previous created image
    clean <target>                    Cleanup dist/ directory.

EOF
    exit 0
}

show_version(){
    cat << EOF
hypersolid
 - Version: ${VERSION}
 - License: GPL-2.0 https://www.gnu.org/licenses/gpl-2.0.html
 - Repository: https://github.com/hypersolid-os/hypersolid
EOF
    exit 0
}

# simple processing for help+versioning commands
[ "$1" = "--help" ] || [ "$1" = "-h" ] || [ -z "$1" ] && show_usage
[ "$1" = "--version" ] || [ "$1" = "-v" ] && show_version

# Exit on Error
set -e

# basedir
BASEDIR="$( cd "$( dirname "$(realpath ${BASH_SOURCE[0]})" )" && pwd )"
WORKINGDIR="$(pwd)"

# extract target name; remove trailing slash
TARGET_NAME="${2%/}"

# assign target dir
TARGET_DIR=$WORKINGDIR/$TARGET_NAME

# assign dist dir to copy files
DIST_BASEDIR=$WORKINGDIR/.dist
DIST_DIR=$DIST_BASEDIR/$TARGET_NAME

# build directory within isolated env
BUILD_ENV=/tmp/hypersolid-env
BUILD_ENV=/mnt/data/tmp/hypersolid-env

# default mirror config
CONF_DEBIAN_MIRROR="http://deb.debian.org/debian"
CONF_DEBIAN_SECURITY_MIRROR="http://security.debian.org/debian-security"

# get function utilities
source $BASEDIR/setup/functions

# intro
# ---------------------------------------
function hypersolid_intro(){
    _print_colorized '\x1B[1m' "_________________________________________________________________\n"
    print_heading " >> hypersolid" '\x1B[1m'
    _print_colorized '\x1B[1m' "_________________________________________________________________\n"
}

function hypersolid_disclaimer(){
    _print_colorized '\x1B[91m\x1B[1m' "_________________________________________________________________\n"
    _print_colorized '\x1B[91m\x1B[1m' "This program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of"
    _print_colorized '\x1B[91m\x1B[1m' "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\nSee the GNU General Public License v2 for more details."
    _print_colorized '\x1B[91m\x1B[1m' "_________________________________________________________________\n"
    _print_colorized '\x1B[1m' "hypersolid ${VERSION} - github.com/hypersolid-os/hypersolid\n"
}

# check directory structure
# ---------------------------------------
function hypersolid_precheck(){
    # Check directory
    if [ ! -d "$TARGET_DIR" ]; then
        panic "target [$TARGET_NAME] does not exists!"
    fi

    # Check directory
    if [ ! -d "$DIST_BASEDIR" ]; then
        panic "dist base directory [$DIST_BASEDIR] does not exists!"
    fi
}

# prepare build environment
# ---------------------------------------
function hypersolid_prepare_buildenv(){

    # create build environment
    $BASEDIR/buildenv/create-hypersolid-env "$BUILD_ENV"
}

# copy/merge sources
# ---------------------------------------
function hypersolid_copy_sources(){

    # source dir exist ?
    if [ ! -d "${1}" ]; then
        panic "source directory [${1}] doesn't exist"
    fi

    # copy target files
    # -------------------------------------------------
    log_info "adding target specific files"
    cp -TR $1/rootfs $ROOT_FS && log_info "target rootfs copied"
    #cp -TR $1/bootfs $BUILD_DIR/bootfs || log_info "bootfs files not available..skipping"

    # scripts available ?
    if [ -d "$1/scripts" ]; then
        log_info "adding scripts"
         cp -RT $1/scripts $ROOT_FS/.build/scripts
    fi

    # config available ?
    if [ -f $1/config ]; then
        log_info "target config copied"
        cp $1/config $ROOT_FS/.build/config
    fi

    # custom module file available ?
    if [ -f $1/modules ]; then
        log_info "adding initramfs module config"
        cp $1/modules $ROOT_FS/etc/initramfs-tools/modules
    fi

    # custom initramfs config available ?
    if [ -d $1/initramfs ]; then
        log_info "adding custom initramfs config"
        cp -R $1/initramfs/. $ROOT_FS/etc/initramfs-tools
    fi

    # custom multistrap config available ?
    if [ -f $1/multistrap.ini ]; then
        log_info "adding custom multistrap configfile"
        cp $1/multistrap.ini $BUILD_ENV/etc/hypersolid
    fi

    # custom multistrap config set available ?
    if [ -d "$1/multistrap" ]; then
        log_info "adding custom multistrap config set"
        cp -RT $1/multistrap $BUILD_ENV/etc/hypersolid
    fi
}

# prepare build
# ---------------------------------------
function hypersolid_build(){

    print_subheading "building $TARGET_NAME"

    # Check config file
    if [ ! -f "$TARGET_DIR/config" ]; then
        panic "target config [$TARGET_DIR] does not exists!"
    fi

    # create hypersolid environment (debian rootfs)
    hypersolid_prepare_buildenv

    # expose temporary paths
    BUILD_DIR=$BUILD_ENV/build
    ROOT_FS=$BUILD_DIR/rootfs
    OUTPUT_DIR=$BUILD_DIR/dist

    # read base config
    if [ -f "$WORKINGDIR/hypersolid.conf" ]; then
        log_info "loading hypersolid.conf"
        source "$WORKINGDIR/hypersolid.conf"
    fi

    # read target config
    source $TARGET_DIR/config

    # Check directory
    if [ ! -d "$DIST_DIR" ]; then
        log_info "dist directory [$DIST_DIR] does not exists..creating"
        mkdir $DIST_DIR
    fi

    # cleanup
    log_info "cleaning up build environment"

    [ -d "$BUILD_DIR" ] && {
        sudo systemd-nspawn \
            --quiet \
            --register=false \
            --private-users \
            --directory ${BUILD_ENV} \
            rm -rf /build
    }

    # create temp dir structure
    mkdir -p $BUILD_DIR/{dist,rootfs,target}

    # copy initramfs config
    # -------------------------------------------------
    log_info "adding initramfs configuration"
    mkdir -p $ROOT_FS/etc/initramfs-tools
    cp -RT $BASEDIR/initramfs $ROOT_FS/etc/initramfs-tools

    # copy setup script
    # -------------------------------------------------
    log_info "adding setup scripts"
    cp -RT $BASEDIR/setup $ROOT_FS/.build

    # copy generic rootfs files
    # -------------------------------------------------
    print_subheading "adding generic root file system"
    cp -RT $BASEDIR/rootfs $ROOT_FS

    # copy base rootfs files from extended target
    # -------------------------------------------------
    if [ ! -z "$CONF_EXTEND" ]; then
        # source dirs to array
        IFS=' ' read -ra extendedSourceDirs <<<"$CONF_EXTEND"

        # copy files
        for EXTDIR in "${extendedSourceDirs[@]}"; do
            print_subheading "adding extended target [${EXTDIR}]"
            hypersolid_copy_sources "$WORKINGDIR/$EXTDIR"
        done 
    fi

    # copy target rootfs files
    # -------------------------------------------------
    print_subheading "adding target"
    hypersolid_copy_sources $TARGET_DIR

    # apt proxy conf exists ?
    if [ -f $WORKINGDIR/apt-proxy.conf ]; then
        log_info "using apt-proxy config"
        # copy into build context
        cp $WORKINGDIR/apt-proxy.conf $BUILD_ENV/etc/hypersolid/apt-proxy.conf
    else
        touch $BUILD_ENV/etc/hypersolid/apt-proxy.conf
    fi

    # call hook
    hook_exec "pre-build"
    log_info "running build of $TARGET_NAME"

    # image UUID externally set ?
    # UUID provided ?
    if [ -z "$HYPERSOLID_UUID" ]; then
        # pure random tagname
        export HYPERSOLID_UUID=$(cat /proc/sys/kernel/random/uuid)
        log_info "no hypersolid uuid provided - using random ${HYPERSOLID_UUID}"
    fi

    # store uuid
    echo ${HYPERSOLID_UUID} > ${DIST_DIR}/.uuid

    # multiarch build: buildenv + rootfs has been created
    # run build for each arch
    # -------------------------------------------------
    IFS=' ' read -ra TARGET_ARCHS <<<"$CONF_ARCH"

    # run build for each architecture
    for BUILDARCH in "${TARGET_ARCHS[@]}"; do

        print_heading "building $TARGET_NAME on $BUILDARCH"

        # cleanup
        log_info "cleaning up build environment"

        [ -d "$BUILD_DIR" ] && {
            sudo systemd-nspawn \
                --quiet \
                --register=false \
                --private-users \
                --directory ${BUILD_ENV} \
                rm -rf /build/target
        }

        # create temp dir structure
        mkdir -p $BUILD_DIR/{dist,rootfs,target}

        # set buildarch
        echo -e "\nexport _BUILDARCH=${BUILDARCH}" >> $ROOT_FS/.build/config

        # multistrap source filter
        # -------------------------------------------------

        # copy multistrap config
        log_info "adding multistrap base configuration"
        cp -RT $BASEDIR/multistrap $BUILD_ENV/etc/hypersolid

        # replace multistrap source urls
        sed -i "s#\$DEBIAN_SECURITY_MIRROR#${CONF_DEBIAN_SECURITY_MIRROR}#g" $BUILD_ENV/etc/hypersolid/*.ini
        sed -i "s#\$DEBIAN_MIRROR#${CONF_DEBIAN_MIRROR}#g" $BUILD_ENV/etc/hypersolid/*.ini

        # replace arch
        sed -i "s#\$BUILDARCH#${BUILDARCH}#g" $BUILD_ENV/etc/hypersolid/*.ini

        # cleanup artifacts
        log_info "removing old artifacts"
        rm ${DIST_DIR}/kernel-${BUILDARCH}* || /bin/true
        rm ${DIST_DIR}/initramfs-${BUILDARCH}* || /bin/true
        rm ${DIST_DIR}/system-${BUILDARCH}* || /bin/true

        # run arch specific build
        hypersolid_nspawnbuild

    done
}

# run build on current hostsystem with systemd-nspawn
# ---------------------------------------
function hypersolid_nspawnbuild(){

    # stage 1 - run multistrap within isolated env
    print_subheading "[stage1] download + prepare packages"
    sudo systemd-nspawn \
        --register=false \
        --private-users \
        --directory ${BUILD_ENV} \
        -E HYPERSOLID_UUID=$HYPERSOLID_UUID \
        -E HYPERSOLID_NAME=$TARGET_NAME \
        -E HYPERSOLID_ROOTPW=$HYPERSOLID_ROOTPW \
        "/build/rootfs/.build/multistrap"

    # stage 2 - configure packages+system in final rootfs
    print_subheading "[stage2] chroot into rootfs to execute postinstall actions"
    sudo systemd-nspawn \
        --register=false \
        --private-users \
        --timezone=off \
        --directory ${BUILD_ENV}/build/target \
        -E HYPERSOLID_UUID=$HYPERSOLID_UUID \
        -E HYPERSOLID_NAME=$TARGET_NAME \
        -E HYPERSOLID_ROOTPW=$HYPERSOLID_ROOTPW \
        "/.build/dpkg-configure"

    # stage 3 - finalize build, create package
    print_subheading "[stage3] finalize build + creating package"
    sudo systemd-nspawn \
        --register=false \
        --private-users \
        --directory ${BUILD_ENV} \
        -E HYPERSOLID_UUID=$HYPERSOLID_UUID \
        -E HYPERSOLID_NAME=$TARGET_NAME \
        -E HYPERSOLID_ROOTPW=$HYPERSOLID_ROOTPW \
        "/build/rootfs/.build/finalize"

    # copy files to dist dir
    print_subheading "copying build artifacts"
    cp -RT $OUTPUT_DIR $DIST_DIR && {
        log_success "images copied to $DIST_DIR"
    }

    # call hook
    hook_exec "post-build"

    # final message
    print_heading "BUILD READY" '\x1B[92m\x1B[1m'
}

# attach to current active build system
# ---------------------------------------
function hypersolid_attach(){

    # env active ?
    [ ! -d "${BUILD_ENV}/build/target" ] && {
        log_error "hypersolid target environment not exist!"
        exit 1
    }

    print_subheading "attaching to build environment.."

    sudo systemd-nspawn \
        --register=false \
        --private-users \
        --directory ${BUILD_ENV}/build/target \
        /bin/bash
}

# remove files within dist directory of specific target
# ---------------------------------------
function hypersolid_clean_dist(){
    print_subheading "removing artifacts of target $TARGET_NAME"

    # dist directory exists ?
    if [ -d "$DIST_DIR" ]; then
        rm $DIST_DIR/* && {
            log_success "ok"
        }
    else
        log_warning "target doesn't exist"
    fi
}

# load target uuid 
# ---------------------------------------
function hypersolid_load_params(){

    # uuid exists ?
    if [ ! -f "${DIST_DIR}/.uuid" ]; then
        panic "image uuid cannot be loaded"
    fi

    # load uuid
    export HYPERSOLID_UUID=$(cat ${DIST_DIR}/.uuid)
    
    # read base config
    if [ -f "$WORKINGDIR/hypersolid.conf" ]; then
        log_info "loading hypersolid.conf"
        source "$WORKINGDIR/hypersolid.conf"
    fi

    # Check config file
    if [ ! -f "$TARGET_DIR/config" ]; then
        panic "target config [$TARGET_DIR] does not exists!"
    fi

    # read target config
    source $TARGET_DIR/config
}

# Command Dispatching
# ---------------------------------------
hypersolid_disclaimer
case "$1" in
    build)
        hypersolid_intro
        hypersolid_precheck
        hypersolid_build
        exit 0
    ;;

    deploy)
        hypersolid_intro
        hypersolid_precheck
        hypersolid_load_params
        hook_exec "deploy"
        exit 0
    ;;

    build-deploy)
        hypersolid_intro
        hypersolid_precheck
        hypersolid_build
        hook_exec "deploy"
        exit 0
    ;;

    update)
        hypersolid_intro
        hypersolid_precheck
        hypersolid_build
        hook_exec "codesigning"
        hook_exec "deploy"
        exit 0
    ;;

    sign)
        hypersolid_intro
        hypersolid_precheck
        hypersolid_load_params
        hook_exec "codesigning"
        exit 0
    ;;

    clean)
        hypersolid_clean_dist
        exit 0
    ;;

    attach)
        hypersolid_attach
        exit 0
    ;;

    create-env)
        hypersolid_prepare_buildenv
        exit 0
    ;;

    *)
        show_usage
        exit 1
    ;;
esac