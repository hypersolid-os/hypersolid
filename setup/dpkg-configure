#!/bin/bash

export DEBIAN_FRONTEND=noninteractive DEBCONF_NONINTERACTIVE_SEEN=true
export LC_ALL=C LANGUAGE=C LANG=C
export RUNLEVEL=1

# Fail on Error !
set -e

# get function utilities
source /.build/functions

# load config
source /.build/config

# fix awk - alternatives my not configured due to missing dep link
ln -s /usr/bin/mawk /usr/bin/awk

# run pre configure script hook ?
scriptd_exec "pre-chroot" "/.build/scripts"

# configure packages
log_info "configuring packages.."
dpkg --configure -a && log_success "packages configured"

# check for configuration errors
DPKG_PKG_FAILURES=$(dpkg-query -f '${status} ${package}\n' -W | awk '$3 != "installed" {print $4}')
[ ! -z "${DPKG_PKG_FAILURES}" ] && {
    panic "DPKG error during package installation/configuration"
}

# run target apt setup
#log_info "installing target packages.."
#/.build/apt.sh

# cleanup apt config
if [ ! "$CONF_APT" == "keep" ]; then
    log_info "removing target apt config"
    rm -rf /etc/apt
fi

# generate locales
log_info "generating locales.."
locale-gen

# set default target
systemctl set-default multi-user.target

# disable services
systemctl disable console-setup
systemctl disable apt-daily.timer
systemctl disable apt-daily.service

# enable first-boot service
systemctl enable hypersolid-firstboot.service

# remove ssh keys
rm /etc/ssh/ssh_host_*

# remove machine-id
rm /etc/machine-id

# run console setup
setupcon --save-only

# get last recent kernel version based on lib/modules
ls -1 /usr/lib/modules | sort -r | head -n1 > /etc/kernel_version

if [ ! -z "$(cat /etc/kernel_version)" ]; then
    # print info
    log_success "kernel version: $(cat /etc/kernel_version)"

    # create initramfs
    log_info "creating initramfs.."
    mkinitramfs -o /boot/initramfs.img -v "$(cat /etc/kernel_version)"
else
    log_warning "no kernel found - skipping initramfs generation.."
fi

# remove "temporary" packages
log_info "removing temporary packages.."
if [ "$CONF_APT" == "keep" ]; then
    #dpkg -r --force-depends busybox-static initramfs-tools
    rm /etc/apt/apt.conf.d/01-proxy.conf
else
    dpkg -r --force-depends busybox-static initramfs-tools apt debian-archive-keyring
fi

# set root password
# password hash provided via ENV ?
if [ ! -z "$HYPERSOLID_ROOTPW" ]; then
    log_success "using external root password"
    echo "root:$HYPERSOLID_ROOTPW" | chpasswd -e
else
    log_warning "using default root password"
    echo "root:root" | chpasswd
fi

# external uuid set ?
if [ ! -z "$HYPERSOLID_UUID" ]; then
    log_info "external UUID provided"
    echo "$HYPERSOLID_UUID" > /etc/hypersolid_uuid

    # add to prelogin issue message
    echo -e ">> hypersolid [$HYPERSOLID_UUID]\nDebian GNU/Linux on \l\n" > /etc/issue
fi

# set hypersolid build info
cat > "/etc/hypersolid_build" <<- EOF
$HYPERSOLID_NAME
$(date)
EOF

# run post configure script hook ?
scriptd_exec "post-chroot" "/.build/scripts"

# success
log_success "postinstall actions finished"
