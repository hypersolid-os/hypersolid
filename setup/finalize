#!/usr/bin/env bash

# Fail on Error !
set -e

# expose temporary paths
export TARGET_FS=/build/target
export OUTPUT_DIR=/build/dist

# get function utilities
source $TARGET_FS/.build/functions

# load config
source $TARGET_FS/.build/config

# run post configure script hook ?
scriptd_exec "post-configure" "$TARGET_FS/.build/scripts"

# move initramfs
mv $TARGET_FS/boot/initramfs.img $OUTPUT_DIR/initramfs-${_BUILDARCH}.img

# move kernel (if exists)
if [ -f $TARGET_FS/vmlinuz ]; then
    cp $TARGET_FS/vmlinuz $OUTPUT_DIR/kernel-${_BUILDARCH}.img
fi

# squasfs compression algo set ?
if [ -z "$CONF_SQUASHFS_ARGS" ]; then
    CONF_SQUASHFS_ARGS=(-comp lz4 -Xhc)
fi

# create squashfs
log_info "creating squashfs system image"
mksquashfs $TARGET_FS $OUTPUT_DIR/system-${_BUILDARCH}.img "${CONF_SQUASHFS_ARGS[@]}" \
    -e \
        $TARGET_FS/boot \
        $TARGET_FS/.build \
        $TARGET_FS/etc/initramfs-tools \
        $TARGET_FS/vmlinuz* \
        $TARGET_FS/initrd* \
&& {
    log_success "squashfs file created in $TARGET_FS $OUTPUT_DIR/system-${_BUILDARCH}.img"
} || {
    panic "failed to create squashfs image"
}

# wrap system.img into CPIO
if [ "$CONF_IMAGE_TYPE" != "img" ]; then
    log_info "creating cpio wrapped squashfs image"
    echo "system-${_BUILDARCH}.img" | cpio --quiet -H newc -o --directory=$OUTPUT_DIR > $OUTPUT_DIR/system-${_BUILDARCH}.cpio && {
        log_success "cpio wrapped squashfs file created in $TARGET_FS $OUTPUT_DIR/system-${_BUILDARCH}.cpio"
    } || {
        panic "failed to create cpio wrapped image"
    }
fi

# cpio image only ? remove .img
if [ "$CONF_IMAGE_TYPE" = "cpio" ]; then
    log_info "removing plain squashfs system-${_BUILDARCH}.img file"
    rm $OUTPUT_DIR/system-${_BUILDARCH}.img
fi

# run post build script hook ?
scriptd_exec "post-build" "$TARGET_FS/.build/scripts"
